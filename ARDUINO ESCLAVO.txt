// Arduino Esclavo/Receiver

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

#define NUM_SERVOS 6

Servo servo[NUM_SERVOS];
uint8_t servoPosEnviar[NUM_SERVOS];
uint8_t servoPosGuardar[NUM_SERVOS];
uint8_t servoPin[NUM_SERVOS] = {8, 9, 10, 11, 12, 13};
uint8_t anguloMin[NUM_SERVOS] = {50, 10, 10, 10, 10, 10};    // Ángulo mínimo permitido
uint8_t pos;
uint8_t Counter=0;
uint8_t Emergency=0;

LiquidCrystal_I2C lcd(0x27, 16, 2);  // Establecer la dirección y las dimensiones de LCD I2C

int timer=0;
const int alarmPin = 3; // Número de Pin para la alarma PD3
const int ledPin = 5;   // Número de Pin para el LED PD5
const int EmergencyReset = 2; // PD2
bool alarmTriggered = false; 

const int LL=6; //Led timer por alarma

void alarmInterrupt() {
  // Manejar la interrupción si es necesario
  Emergency=!Emergency;
  //alarmTriggered = true; // Establecer el indicador de activación de alarma
}

//El registro PORTD debe usarse para escribir en los pines y el registro DDRD debe usarse para configurar los modos de pin.

void blinkLED() {
  const int blinkDuration = 500; // Duración del Blink en milisegundos
  const int blinkInterval = 250; // Intervalo del Blink en milisegundos
  unsigned long previousMillis = 0;
  static bool ledState = LOW;

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= blinkInterval) {
    previousMillis = currentMillis;
    ledState = !ledState;
    if (ledState) {
      PORTD |= (1 << PORTD5);   // ON LED
    } else {
      PORTD &= ~(1 << PORTD5);  // OFF LED
    }
  }
  delay(blinkDuration);
}

void activateAlarm() {
  for (uint8_t i = 0; i < NUM_SERVOS; i++) {
      servoPosGuardar[i] = anguloMin[i];
  }
  for (uint8_t i = 0; i < NUM_SERVOS; i++) {
    uint8_t pos = servoPosGuardar[i];
    servo[i].write(pos);
    lcd.setCursor(0, i);
    lcd.print("Emergencia ");
    lcd.print(i);
    lcd.print(": ");
    lcd.print(pos);
    lcd.print("     ");
  }
  PORTD |= (1 << PORTD3);    // ON alarma
  blinkLED();                // Blink LED
  PORTD &= ~(1 << PORTD3);   // OFF alarma
  alarmTriggered = false;    // Restablecer el indicador de activación de alarma
  PORTD &= ~(1 << PORTD5);   // OFF LED
}

ISR(TIMER0_COMPA_vect) {
	timer++;
}

void setup() {
  Serial.begin(9600);
  lcd.init();  // Inicializando la LCD
  lcd.backlight();  // ON backlight
  lcd.setCursor(0, 0);
  lcd.print("MANO ROBOTICA");
  delay(500);
  lcd.setCursor(0, 0);
  lcd.print("Calibrando...");
  delay(300);
  lcd.clear();
  
//Timer para mostrar que se alcanzó la posición inicial (ángulo min) de los servos mediante un led
  TCCR0A=(1<<WGM01);    //Estableciendo el modo CTC   
  OCR0A=0xF9; //Valor de ORC0A para 1ms 
  TIMSK0|=(1<<OCIE0A);   // Establecer la solicitud de interrupción
  sei(); //Habilitar interrupción
  TCCR0B|=(1<<CS01);    //Establecer el reloj de preescala 1/64
  TCCR0B|=(1<<CS00);
  
  for (uint8_t i = 0; i < NUM_SERVOS; i++) {
    servo[i].attach(servoPin[i]);
  }

  DDRD |= (1 << PORTD3); // Estableciendo alarmPin como OUTPUT
  DDRD |= (1 << PORTD5); // Estableciendo ledPin como OUTPUT
  DDRD |= (1 << PORTD6); // Estableciendo LL como OUTPUT

  attachInterrupt(0, alarmInterrupt, RISING);
}

void loop() {
  if(timer>=500){
    Counter=1;
    timer=0;
  }

  if (Serial.available() >= NUM_SERVOS) {
    for (uint8_t i = 0; i < NUM_SERVOS; i++) {
      servoPosGuardar[i] = Serial.read();
    }
  }
  
if (Emergency) {
  PORTD |= (1 << PORTD5); // Estableciendo ledPin HIGH
  for (uint8_t i = 0; i < NUM_SERVOS; i++) {
    servoPosGuardar[i] = anguloMin[i];
  }
    for (uint8_t i = 0; i < NUM_SERVOS; i++) {
      uint8_t pos = servoPosGuardar[i];
      servo[i].write(pos);
      lcd.setCursor(0, i);
      lcd.print("Emergencia ");
      lcd.print(i);
      lcd.print(": ");
      lcd.print(pos);
      lcd.print("     ");
    }

PORTD |= (1 << PORTD3);  // ON alarma
blinkLED();                // Blink LED
PORTD &= ~(1 << PORTD3); // OFF alarma
}
  else{
PORTD &= ~(1 << PORTD5);  // OFF LED

if (Counter == 1) {
  PORTD |= (1 << PORTD6);  // ON LED
  for (uint8_t i = 0; i < NUM_SERVOS; i++) {
    servoPosEnviar[i] = servoPosGuardar[i];
  }
  for (uint8_t i = 0; i < NUM_SERVOS; i++) {
    uint8_t pos = servoPosEnviar[i];
    servo[i].write(pos);
    lcd.setCursor(0, i);
    lcd.print("Servo ");
    lcd.print(i);
    lcd.print(": ");
    lcd.print(pos);
    lcd.print("     ");
  }
  Counter = 0;
} else {
  PORTD &= ~(1 << PORTD6);  // OFF LED
}

  // Comprobar si se activa la alarma
  if (alarmTriggered) {
    activateAlarm();
  }
}
}


